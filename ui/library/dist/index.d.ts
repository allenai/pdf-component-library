// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../library/react
//   ../library/react-pdf

declare module 'pdf-components' {
    import { Props as BoundingBoxProps } from 'pdf-components/src/components/BoundingBox';
    import { Props as DocumentWrapperProps } from 'pdf-components/src/components/DocumentWrapper';
    import { Props as DownloadButtonProps } from 'pdf-components/src/components/DownloadButton';
    import { Props as HighlightOverlayProps } from 'pdf-components/src/components/HighlightOverlay';
    import { Props as OverlayProps } from 'pdf-components/src/components/Overlay';
    import { Props as ContextProviderProps } from 'pdf-components/src/context/ContextProvider';
    import { IDocumentContext } from 'pdf-components/src/context/DocumentContext';
    import { ITransformContext } from 'pdf-components/src/context/TransformContext';
    import { IUiContext } from 'pdf-components/src/context/UiContext';
    import { isSideways, PageRotation, rotateClockwise, rotateCounterClockwise } from 'pdf-components/src/utils/rotate';
    import { generatePageIdfromIndex, scrollToId, scrollToPdfPageIndex } from 'pdf-components/src/utils/scroll';
    import { computeBoundingBoxStyle, computePageStyle, getPageHeight, getPageWidth } from 'pdf-components/src/utils/style';
    const _default: {
        BoundingBox: import("react").FunctionComponent<BoundingBoxProps>;
        DocumentWrapper: import("react").FunctionComponent<DocumentWrapperProps>;
        DownloadButton: import("react").FunctionComponent<DownloadButtonProps>;
        HighlightOverlay: import("react").FunctionComponent<HighlightOverlayProps>;
        Overlay: import("react").FunctionComponent<OverlayProps>;
        ContextProvider: import("react").FunctionComponent<ContextProviderProps>;
        DocumentContext: import("react").Context<IDocumentContext>;
        TransformContext: import("react").Context<ITransformContext>;
        UiContext: import("react").Context<IUiContext>;
        isSideways: typeof isSideways;
        PageRotation: typeof PageRotation;
        rotateClockwise: typeof rotateClockwise;
        rotateCounterClockwise: typeof rotateCounterClockwise;
        generatePageIdfromIndex: typeof generatePageIdfromIndex;
        scrollToId: typeof scrollToId;
        scrollToPdfPageIndex: typeof scrollToPdfPageIndex;
        computeBoundingBoxStyle: typeof computeBoundingBoxStyle;
        computePageStyle: typeof computePageStyle;
        getPageHeight: typeof getPageHeight;
        getPageWidth: typeof getPageWidth;
    };
    export default _default;
}

declare module 'pdf-components/src/components/BoundingBox' {
    import * as React from 'react';
    import { BoundingBox as BoundingBoxType } from 'pdf-components/src/types';
    export type Props = {
        className?: string;
        id?: string;
        isHighlighted?: boolean;
        onClick?: () => void;
    } & BoundingBoxType;
    export const BoundingBox: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/components/DocumentWrapper' {
    import * as React from 'react';
    import { DocumentProps } from 'react-pdf';
    export type Props = {
        children?: React.ReactNode;
    } & DocumentProps;
    export const DocumentWrapper: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/components/DownloadButton' {
    import * as React from 'react';
    export type Props = {
        pdfUrl: string;
    };
    /**
      * HTML anchor tag allows you to download a file from the same origin.
      * This is a workaround to download a file served from a different origin
      */
    export const DownloadButton: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/components/HighlightOverlay' {
    import * as React from 'react';
    import { Props as BoundingBoxProps } from 'pdf-components/src/components/BoundingBox';
    export type Props = {
        children?: React.ReactElement<BoundingBoxProps> | Array<React.ReactElement<BoundingBoxProps>>;
        pageIndex: number;
    };
    export const HighlightOverlay: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/components/Overlay' {
    import * as React from 'react';
    import { BoundingBox } from 'pdf-components/src/components/BoundingBox';
    export type Props = {
        children?: React.ReactElement<typeof BoundingBox> | Array<React.ReactElement<typeof BoundingBox>>;
    };
    export const Overlay: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/context/ContextProvider' {
    import * as React from 'react';
    export type Props = {
        children?: React.ReactElement | Array<React.ReactElement>;
    };
    export const ContextProvider: React.FunctionComponent<Props>;
}

declare module 'pdf-components/src/context/DocumentContext' {
    import * as React from 'react';
    import { Dimensions } from 'pdf-components/src/types';
    export interface IDocumentContext {
        numPages: number;
        pageDimensions: Dimensions;
        setNumPages: (numPages: number) => void;
        setPageDimensions: (pageDimensions: Dimensions) => void;
    }
    export const DocumentContext: React.Context<IDocumentContext>;
}

declare module 'pdf-components/src/context/TransformContext' {
    import * as React from 'react';
    import { PageRotation } from 'pdf-components/src/utils/rotate';
    export interface ITransformContext {
        rotation: PageRotation;
        scale: number;
        setRotation: (rotation: PageRotation) => void;
        setScale: (scale: number) => void;
    }
    export const TransformContext: React.Context<ITransformContext>;
}

declare module 'pdf-components/src/context/UiContext' {
    import * as React from 'react';
    import { Nullable } from 'pdf-components/src/types';
    export interface IUiContext {
        errorMessage: Nullable<string>;
        isLoading: boolean;
        isShowingHighlightOverlay: boolean;
        isShowingOutline: boolean;
        isShowingTextHighlight: boolean;
        setErrorMessage: (errorMessage: Nullable<string>) => void;
        setIsLoading: (isLoading: boolean) => void;
        setIsShowingHighlightOverlay: (isShowingHighlightOverlay: boolean) => void;
        setIsShowingOutline: (isShowingOutline: boolean) => void;
        setIsShowingTextHighlight: (isShowingTextHighlight: boolean) => void;
    }
    export const UiContext: React.Context<IUiContext>;
}

declare module 'pdf-components/src/utils/rotate' {
    export enum PageRotation {
        Rotate0 = 0,
        Rotate90 = 90,
        Rotate180 = 180,
        Rotate270 = 270
    }
    export function rotateClockwise(rotation: PageRotation): PageRotation;
    export function rotateCounterClockwise(rotation: PageRotation): PageRotation;
    /**
      * Tests whether the page is rotated 90 degrees clockwise or counterclockwise from zero,
      * e.g. whether the page "is rotated sideways."
      */
    export function isSideways(rotation: PageRotation): boolean;
}

declare module 'pdf-components/src/utils/scroll' {
    export function generatePageIdfromIndex(pageIndex: number | string): string;
    export function scrollToId(id: string): void;
    export function scrollToPdfPageIndex(pageIndex: number | string): void;
}

declare module 'pdf-components/src/utils/style' {
    import { Dimensions, Size } from 'pdf-components/src/types';
    import { PageRotation } from 'pdf-components/src/utils/rotate';
    export function computeBoundingBoxStyle(boundingBoxSize: Size, pageDimensions: Dimensions, rotation: PageRotation, scale: number): Size;
    export function computePageStyle(pageDimensions: Dimensions, rotation: PageRotation, scale: number): Size;
    export function getPageHeight(pageDimensions: Dimensions, rotation: PageRotation): number;
    export function getPageWidth(pageDimensions: Dimensions, rotation: PageRotation): number;
}

declare module 'pdf-components/src/types' {
    export type Nullable<T> = T | null;
    export type Dimensions = {
        height: number;
        width: number;
    };
    export type Origin = {
        top: number;
        left: number;
    };
    export type Size = Dimensions & Origin;
    export type BoundingBox = {
        page: number;
    } & Size;
}

